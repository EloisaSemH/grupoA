O que é controle de versão?
 O controle de versão é um sistema que registra as mudanças feitas em um arquivo ou um conjunto de arquivos ao longo do tempo de forma que você possa recuperar versões específicas. 
 O método preferido de controle de versão por muitas pessoas é copiar arquivos em outro diretório (talvez um diretório com data e hora, se forem espertos). Esta abordagem é muito comum por ser tão simples, mas é também muito suscetível a erros. É fácil esquecer em qual diretório você está e gravar acidentalmente no arquivo errado ou sobrescrever arquivos sem querer.

O que é o Git?
O Git é um software livre (GNU General Public License) inicialmente foi projetado e desenvolvido por Linus Torvalds, para o desenvolvimento do Kernel Linux, é um dos vários Sistemas de Controle de Versão de arquivos. Através dele é possível desenvolver projetos na qual diversas pessoas podem contribuir simultaneamente no mesmo, editando e criando novos arquivos e permitindo que os mesmos possam existir sem o risco de suas alterações serem sobrescritas. Umas das principais aplicações do Git é justamente esta, permitir que um arquivo possa ser editado ao mesmo tempo por pessoas diferentes.

O que é GitHub?
É  uma espécie de rede social para desenvolvedores e programadores. Ele possui diversas funcionalidades, como feeds, followers (que seriam seus amigos), wiki e um gráfico que mostra como os desenvolvedores estão contribuindo trabalhando nas versões de seus repositórios. Este serviço web oferece diversas funcionalidades extras aplicadas ao Git, de forma gratuita, mas também existem planos comerciais para projetos de código privados. O GitHub permite que você hospede seus projetos pessoais em nuvem. Além disso, quase todos os projetos/frameworks/bibliotecas sobre desenvolvimento open source estão no GitHub, e você pode acompanhá-los através de novas versões, contribuir informando bugs ou até mesmo enviando código e correções.Para você começar a trabalhar com o Git, você deve instalar um software em seu computador, que é um próprio sistema de controle de versão.

O que é GitLab?
GitLab é um gerenciador de repositório de software baseado em git, possuí suporte a Wiki, gerenciamento de tarefas e CI/CD, é similar ao GitHub, entretanto, o GitLab permite que os desenvolvedores armazenem o código em seus próprios servidores.

Explicação de como criar uma conta em um dos serviços.

Como é a instalação do git no Linux.
1º passo
Abra o terminal
2º passo
Devemos instalar via PPA 
Um Personal Package Archive (PPA), em português Arquivo de Pacote Pessoal, é um repositório de software especial para carregar (upload) pacotes de fontes a serem compilados e publicados como um repositório APT ou Launchpad. 
execute o comando :
sudo add-apt-repository  ppa:git-core/ppa
3º passo
execute o comando: 
sudo apt-get update
esse comando vai  atualizar o  repositório
4º passo
execute o comando  :
sudo apt-get install git +
basta confirmar e o github estará instalado
Ao listarmos os diretórios, podemos ver que foi instalado "sudo_as_admin_sucessfull
Agora vamos configurar  o usuário e o email, basta executar os comandos:
git config --global user.name "digite seu usuário"
configurado o nome do usuario, configuraremos o email utilizando o comando :
git config --global user.email "digite seu email"
Utilizando o comando ls - a podemos ver que foi criado o arquivo .gitconfig , esse arquivo tem um ponto na frente do nome o que significa que é um arquivo oculto.
Utilizaremos o comando cat .gitconfig para  que os parametros de configuração de nome e email sejam exibidos.

Como é a instalação do git no Windows.

Como configurar o git.
A primeira coisa a se fazer é definir seu nome de usuário e e-mail, para isso use os seguintes comandos:
$ git config --global user.name "Seu Nome de Usuário"
$ git config --global user.email seuemail@email.com
Obs: você só precisará fazer isso uma vez caso passe a opção --global, pois o Git sempre usará essa informação para qualquer coisa que você faça nesse sistema.
O Git utiliza o editor padrão do sistema Vi ou Vim, mas é possível configurar para um editor de sua preferência através do comando:
$ git config --global core.editor nomeeditor
Caso queira configurar a ferramenta padrão de diff utilizada para resolver conflitos de merge:
$ git config --global merge.tool kdiff3
Git aceita kdiff3, tkdiff, meld, xxdiff, emerge, vimdiff, gvimdiff, ecmerge e opendiff.
Para verificar suas configurações, utilize:
$ git config --list

Quais os principais comandos do git?
git init - cria um nono repositório
git clone /"caminho para o repositório"/ - cria uma cópia de trabalho em um repositório local
git pull - atualiza o repositório local
git merge (branch) - mescla outro branch ao seu 
git add (arquivo) - adiciona mudanças aos index
git commit -m "comentários das alterações" - grava as alterações no repositório local
git push origin (nome do branch) - envia alterações ao repositório remoto
git remote add origin <servidor> - conecta em um servidor 
git checkout -- (arquivo) - subscreve as alterações locais

O que é git pull?
Incorpora alterações de um repositório remoto num branch atual.

O que são branches?
Como arrumar uma mensagem errada em um commit.
Basta realizar um --amend:

git commit --amend
Ele abrirá o editor de texto com a mensagem do último commit e você pode atualizar a mensagem.
Explicação sobre como um grupo de faculdade pode usar git para colaborar em um projeto?


LINKS ÚTEIS
https://git-scm.com/book/pt-br/v1/Primeiros-passos-Sobre-Controle-de-Vers%C3%A3o - Controle de versão
https://git-scm.com/book/pt-br/v1/Primeiros-passos-Uma-Breve-Hist%C3%B3ria-do-Git - O que é o GIT 
